diff --git a/configure.ac b/configure.ac
index e05faf4..2dd87fd 100644
--- a/configure.ac
+++ b/configure.ac
@@ -16,7 +16,7 @@ LU_DEFINE_VERSION_ATOM([LIBUSB_MICRO])
 LU_DEFINE_VERSION_RC_ATOM([LIBUSB_RC])
 
 AC_PREREQ([2.69])
-AC_INIT([libusb-1.0], [LIBUSB_MAJOR[.]LIBUSB_MINOR[.]LIBUSB_MICRO[]LIBUSB_RC], [libusb-devel@lists.sourceforge.net], [libusb-1.0], [http://libusb.info])
+AC_INIT([libusb-1.0-brickd], [LIBUSB_MAJOR[.]LIBUSB_MINOR[.]LIBUSB_MICRO[]LIBUSB_RC], [libusb-devel@lists.sourceforge.net], [libusb-1.0-brickd], [http://libusb.info])
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_SRCDIR([libusb/core.c])
 AC_CONFIG_MACRO_DIR([m4])
@@ -34,7 +34,7 @@ dnl http://sourceware.org/autobook/autobook/autobook_91.html
 lt_current=3
 lt_revision=0
 lt_age=3
-LT_LDFLAGS="-version-info ${lt_current}:${lt_revision}:${lt_age} -no-undefined"
+LT_LDFLAGS="-version-info ${lt_current}:${lt_revision}:${lt_age} -no-undefined -static-libgcc"
 
 m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])
 
diff --git a/libusb/Makefile.am b/libusb/Makefile.am
index 30d3547..074500b 100644
--- a/libusb/Makefile.am
+++ b/libusb/Makefile.am
@@ -3,7 +3,7 @@ AUTOMAKE_OPTIONS = subdir-objects
 AM_CFLAGS += -fvisibility=hidden $(THREAD_CFLAGS)
 AM_CXXFLAGS += -fvisibility=hidden $(THREAD_CFLAGS)
 
-lib_LTLIBRARIES = libusb-1.0.la
+lib_LTLIBRARIES = libusb-1.0-brickd.la
 
 POSIX_PLATFORM_SRC = os/events_posix.h os/events_posix.c \
 		     os/threads_posix.h os/threads_posix.c
@@ -37,7 +37,7 @@ endif
 if OS_HAIKU
 noinst_LTLIBRARIES = libusb_haiku.la
 libusb_haiku_la_SOURCES = $(OS_HAIKU_SRC)
-libusb_1_0_la_LIBADD = libusb_haiku.la
+libusb_1_0_brickd_la_LIBADD = libusb_haiku.la
 endif
 
 if OS_LINUX
@@ -80,15 +80,15 @@ include Makefile.am.extra
 -include ./$(DEPDIR)/libusb-1.0.Plo
 
 if CREATE_IMPORT_LIB
-all-local: .libs/libusb-1.0.dll.a
+all-local: .libs/libusb-1.0-brickd.dll.a
 # Rebuild the import lib from the .def so that MS and MinGW DLLs can be interchanged
-.libs/libusb-1.0.dll.a: libusb-1.0.def libusb-1.0.la
-	$(AM_V_DLLTOOL)$(DLLTOOL) $(DLLTOOLFLAGS) --kill-at --input-def $< --dllname libusb-1.0.dll --output-lib $@
+.libs/libusb-1.0-brickd.dll.a: libusb-1.0.def libusb-1.0-brickd.la
+	$(AM_V_DLLTOOL)$(DLLTOOL) $(DLLTOOLFLAGS) --kill-at --input-def $< --dllname libusb-1.0-brickd.dll --output-lib $@
 endif
 endif
 
-libusb_1_0_la_LDFLAGS = $(LT_LDFLAGS) $(EXTRA_LDFLAGS)
-libusb_1_0_la_SOURCES = libusbi.h version.h version_nano.h \
+libusb_1_0_brickd_la_LDFLAGS = $(LT_LDFLAGS)
+libusb_1_0_brickd_la_SOURCES = libusbi.h version.h version_nano.h \
 	core.c descriptor.c hotplug.c io.c strerror.c sync.c \
 	$(PLATFORM_SRC) $(OS_SRC)
 
diff --git a/libusb/core.c b/libusb/core.c
index 4f98ef9..a291c53 100644
--- a/libusb/core.c
+++ b/libusb/core.c
@@ -2574,6 +2574,12 @@ static void log_str(enum libusb_log_level level, const char *str)
 #endif /* USE_SYSTEM_LOGGING_FACILITY */
 }
 
+static libusb_log_callback usbi_log_callback = NULL;
+
+void API_EXPORTED libusb_set_log_callback(libusb_log_callback callback) {
+	usbi_log_callback = callback;
+}
+
 static void log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	const char *function, const char *format, va_list args)
 {
@@ -2582,6 +2588,11 @@ static void log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	int global_debug, header_len, text_len;
 	static int has_debug_header_been_displayed = 0;
 
+	if (usbi_log_callback != NULL) {
+		usbi_log_callback(ctx, level, function, format, args);
+		return;
+	}
+
 #ifdef ENABLE_DEBUG_LOGGING
 	global_debug = 1;
 	UNUSED(ctx);
diff --git a/libusb/libusb-1.0.def b/libusb/libusb-1.0.def
index c8d1eb2..f7b4e44 100644
--- a/libusb/libusb-1.0.def
+++ b/libusb/libusb-1.0.def
@@ -1,4 +1,4 @@
-LIBRARY "libusb-1.0.dll"
+LIBRARY "libusb-1.0-brickd.dll"
 EXPORTS
   libusb_alloc_streams
   libusb_alloc_streams@16 = libusb_alloc_streams
@@ -179,3 +179,5 @@ EXPORTS
   libusb_wait_for_event@8 = libusb_wait_for_event
   libusb_wrap_sys_device
   libusb_wrap_sys_device@12 = libusb_wrap_sys_device
+  libusb_set_log_callback
+  libusb_set_log_callback@4 = libusb_set_log_callback
diff --git a/libusb/libusb-1.0.rc b/libusb/libusb-1.0.rc
index bcb10fa..859d179 100644
--- a/libusb/libusb-1.0.rc
+++ b/libusb/libusb-1.0.rc
@@ -39,9 +39,9 @@ BEGIN
 			VALUE "InternalName", "libusb\0"
 			VALUE "LegalCopyright", "See individual source files, GNU LGPL v2.1 or later.\0"
 			VALUE "LegalTrademarks", "http://www.gnu.org/licenses/lgpl-2.1.html\0"
-			VALUE "OriginalFilename", "libusb-1.0.dll\0"
+			VALUE "OriginalFilename", "libusb-1.0-brickd.dll\0"
 			VALUE "PrivateBuild", "\0"
-			VALUE "ProductName", "libusb-1.0\0"
+			VALUE "ProductName", "libusb-1.0-brickd-1c6e76a483238ba9f0511c77b02ea7607c30d897-27\0"
 			VALUE "ProductVersion", LIBUSB_VERSIONSTRING
 			VALUE "SpecialBuild", "\0"
 		END
diff --git a/libusb/libusb.h b/libusb/libusb.h
index bc7ef16..a34d490 100644
--- a/libusb/libusb.h
+++ b/libusb/libusb.h
@@ -43,6 +43,7 @@ typedef SSIZE_T ssize_t;
 
 #include <limits.h>
 #include <stdint.h>
+#include <stdarg.h>
 #include <sys/types.h>
 #if !defined(_MSC_VER)
 #include <sys/time.h>
@@ -61,13 +62,13 @@ typedef SSIZE_T ssize_t;
  * As this can be problematic if you include windows.h after libusb.h
  * in your sources, we force windows.h to be included first. */
 #if defined(_WIN32) || defined(__CYGWIN__)
+#if !defined(__CYGWIN__)
+#include <winsock2.h>
+#endif
 #include <windows.h>
 #if defined(interface)
 #undef interface
 #endif
-#if !defined(__CYGWIN__)
-#include <winsock.h>
-#endif
 #endif /* _WIN32 || __CYGWIN__ */
 
 #if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5))
@@ -126,6 +127,8 @@ typedef SSIZE_T ssize_t;
 #define LIBUSB_CALLV
 #endif /* _WIN32 || __CYGWIN__ */
 
+#define LIBUSB_BRICKD_PATCH 1
+
 /** \def LIBUSB_API_VERSION
  * \ingroup libusb_misc
  * libusb's API version.
@@ -1366,7 +1369,6 @@ typedef void (LIBUSB_CALL *libusb_log_cb)(libusb_context *ctx,
 
 int LIBUSB_CALL libusb_init(libusb_context **ctx);
 void LIBUSB_CALL libusb_exit(libusb_context *ctx);
-LIBUSB_DEPRECATED_FOR(libusb_set_option)
 void LIBUSB_CALL libusb_set_debug(libusb_context *ctx, int level);
 void LIBUSB_CALL libusb_set_log_cb(libusb_context *ctx, libusb_log_cb cb, int mode);
 const struct libusb_version * LIBUSB_CALL libusb_get_version(void);
@@ -2136,6 +2138,13 @@ enum libusb_option {
 
 int LIBUSB_CALLV libusb_set_option(libusb_context *ctx, enum libusb_option option, ...);
 
+typedef void (LIBUSB_CALL *libusb_log_callback)(libusb_context *ctx,
+                                                enum libusb_log_level level,
+                                                const char *function,
+                                                const char *format,
+                                                va_list args);
+void LIBUSB_CALL libusb_set_log_callback(libusb_log_callback callback);
+
 #ifdef _MSC_VER
 #pragma warning(pop)
 #endif
diff --git a/libusb/os/windows_common.c b/libusb/os/windows_common.c
index 32887fb..3959625 100644
--- a/libusb/os/windows_common.c
+++ b/libusb/os/windows_common.c
@@ -792,7 +792,14 @@ static int windows_cancel_transfer(struct usbi_transfer *itransfer)
 
 static int windows_handle_transfer_completion(struct usbi_transfer *itransfer)
 {
-	struct libusb_context *ctx = ITRANSFER_CTX(itransfer);
+	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
+	struct libusb_context *ctx = TRANSFER_CTX(transfer);
+
+	if (transfer->dev_handle == NULL) {
+		usbi_dbg(ctx, "ignoring orphaned transfer %p completion", transfer);
+		return 0;
+	}
+
 	struct windows_context_priv *priv = usbi_get_context_priv(ctx);
 	const struct windows_backend *backend = priv->backend;
 	struct windows_transfer_priv *transfer_priv = usbi_get_transfer_priv(itransfer);
@@ -805,7 +812,7 @@ static int windows_handle_transfer_completion(struct usbi_transfer *itransfer)
 		result = GetLastError();
 
 	usbi_dbg(ctx, "handling transfer %p completion with errcode %lu, length %lu",
-		 USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer), ULONG_CAST(result), ULONG_CAST(bytes_transferred));
+	         transfer, ULONG_CAST(result), ULONG_CAST(bytes_transferred));
 
 	switch (result) {
 	case NO_ERROR:
diff --git a/libusb/os/windows_usbdk.c b/libusb/os/windows_usbdk.c
index 9f52b48..2b650e7 100644
--- a/libusb/os/windows_usbdk.c
+++ b/libusb/os/windows_usbdk.c
@@ -23,6 +23,7 @@
 
 #include <config.h>
 
+#include <winsock2.h>
 #include <windows.h>
 #include <stdio.h>
 
diff --git a/libusb/os/windows_winusb.c b/libusb/os/windows_winusb.c
index 3e3f0b4..904983b 100644
--- a/libusb/os/windows_winusb.c
+++ b/libusb/os/windows_winusb.c
@@ -25,6 +25,7 @@
 
 #include <config.h>
 
+#include <winsock2.h>
 #include <windows.h>
 #include <setupapi.h>
 #include <ctype.h>
@@ -1088,6 +1089,13 @@ static int init_device(struct libusb_device *dev, struct libusb_device *parent_d
 			return LIBUSB_ERROR_NOT_FOUND;
 		}
 
+		if (port_number == 0) {
+			usbi_warn(ctx, "got invalid port number for '%s', if this device is connected to a Renesas/NEC USB controller update the driver", priv->dev_id);
+			return LIBUSB_ERROR_NO_DEVICE;
+		}
+
+		usbi_dbg(ctx, "looking up port %d at %s for %s", port_number, parent_priv->path, priv->dev_id);
+
 		// Calculate depth and fetch bus number
 		bus_number = parent_dev->bus_number;
 		if (bus_number == 0) {
@@ -1534,7 +1542,7 @@ static int winusb_get_device_list(struct libusb_context *ctx, struct discovered_
 	}
 
 	for (pass = 0; ((pass < nb_guids) && (r == LIBUSB_SUCCESS)); pass++) {
-//#define ENUM_DEBUG
+#define ENUM_DEBUG
 #if defined(ENABLE_LOGGING) && defined(ENUM_DEBUG)
 		const char * const passname[] = {"HUB", "DEV", "HCD", "GEN", "HID", "EXT"};
 		usbi_dbg(ctx, "#### PROCESSING %ss %s", passname[MIN(pass, EXT_PASS)], guid_to_string(guid_list[pass], guid_string));
